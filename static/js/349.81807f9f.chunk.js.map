{"version":3,"file":"static/js/349.81807f9f.chunk.js","mappings":"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","sources":["components/product/Products.tsx","interfaces/IProduct.ts","mockData/product.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Select, MenuItem, FormControl, InputLabel, Box } from '@mui/material';\nimport { mockProductList } from '../../mockData/product';\nimport { addTab, setRefreshedTab } from '../../stateManagement/slices/tabsSlice'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ProductCategory, ProductData } from '../../interfaces/IProduct';\nimport { EntityListTabProps } from '../../interfaces/ITab';\n\nconst Products: React.FC<EntityListTabProps> = ({ tabId }) => {\n  const [productList, setProductList] = useState<ProductData[]>([]);\n  const dispatch = useDispatch();\n  const { refreshedTab } = useSelector((state: any) => state.tabs);\n\n  const handleNewProduct = () => {\n    dispatch(\n      addTab({\n        tabType: 'Product',\n        tabLabel: 'New product',\n        isRemovableTab: true,\n        entityId: 0,\n        parentTabId: tabId,\n      })\n    );\n  };\n\n  const handleEditProduct = (productId: number) => {\n    dispatch(\n      addTab({\n        tabType: 'Product',\n        tabLabel: 'Edit product',\n        isRemovableTab: true,\n        entityId: productId,\n        parentTabId: tabId,\n      })\n    );\n  };\n\n  const getAllProduct = () => {\n    // Get Product list by API or mock data\n    setProductList(mockProductList);\n  };\n\n  const getCategory = (id: number): string | undefined => {\n    return ProductCategory.find((item) => item.id === id)?.title\n  }\n\n  useEffect(() => {\n    getAllProduct()\n  }, []);\n\n  useEffect(() => {\n    if (refreshedTab === tabId) {\n      dispatch(setRefreshedTab(undefined))\n      getAllProduct()\n    }\n  }, [refreshedTab]);\n\n  return (\n    <div>\n      <Box display=\"flex\" justifyContent=\"flex-start\" mb={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleNewProduct}\n        >\n          New Product\n        </Button>\n      </Box>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>ID</TableCell>\n              <TableCell>Price</TableCell>\n              <TableCell>Category</TableCell>\n              <TableCell>Actions</TableCell> {/* Column for buttons */}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {productList.map((product) => (\n              <TableRow key={product.id}>\n                <TableCell>{product.name}</TableCell>\n                <TableCell>{product.id}</TableCell>\n                <TableCell>${product.price}</TableCell>\n                <TableCell>{getCategory(product.categoryId)}</TableCell>\n                <TableCell>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={() => handleEditProduct(product.id)}\n                  >\n                    Edit\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default Products;","export interface ProductData {\n  id: number;\n  name: string;\n  price: number;\n  categoryId: number;\n}\n\nexport const ProductCategory = [\n  { id: 1, title: \"Electronics\" },\n  { id: 2, title: \"Furniture\" },\n  { id: 3, title: \"Appliances\" }\n];","import { ProductData } from \"../interfaces/IProduct\";\n\n  \n  export const mockProductList: ProductData[] = [\n    { id: 1, name: 'Laptop', price: 999, categoryId: 1 },\n    { id: 2, name: 'Smartphone', price: 699, categoryId: 1 },\n    { id: 3, name: 'Chair', price: 120, categoryId: 2 },\n    { id: 4, name: 'Desk', price: 250, categoryId: 2 },\n    { id: 5, name: 'Headphones', price: 150, categoryId: 1 },\n    { id: 6, name: 'Blender', price: 80, categoryId: 3 },\n    { id: 7, name: 'Refrigerator', price: 1100, categoryId: 3 },\n    { id: 8, name: 'Television', price: 550, categoryId: 1 },\n    { id: 9, name: 'Microwave', price: 200, categoryId: 3 },\n    { id: 10, name: 'Sofa', price: 850, categoryId: 2 },\n  ];"],"names":["_ref","tabId","productList","setProductList","useState","dispatch","useDispatch","refreshedTab","useSelector","state","tabs","getAllProduct","mockProductList","getCategory","id","_ProductCategory$find","ProductCategory","find","item","title","useEffect","setRefreshedTab","undefined","_jsxs","children","_jsx","Box","display","justifyContent","mb","Button","variant","color","onClick","handleNewProduct","addTab","tabType","tabLabel","isRemovableTab","entityId","parentTabId","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","product","name","price","categoryId","handleEditProduct","productId"],"sourceRoot":""}