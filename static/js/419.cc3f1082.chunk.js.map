{"version":3,"file":"static/js/419.cc3f1082.chunk.js","mappings":"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","sources":["components/customer/Customers.tsx","mockData/customers.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Box } from '@mui/material';\nimport { mockCustomerList } from '../../mockData/customers';\nimport { addTab, setRefreshedTab } from '../../stateManagement/slices/tabsSlice'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CustomerData } from '../../interfaces/ICustomer';\nimport { EntityListTabProps } from '../../interfaces/ITab';\n\nconst Customers: React.FC<EntityListTabProps> = ({ tabId }) => {\n  const [customerList, setCustomerList] = useState<CustomerData[]>([]);\n  const dispatch = useDispatch();\n  const { refreshedTab } = useSelector((state: any) => state.tabs);\n\n  const handleNewCustomer = () => {\n    dispatch(\n      addTab({\n        tabType: 'Customer',\n        tabLabel: 'New customer',\n        isRemovableTab: true,\n        entityId: 0,\n        parentTabId: tabId,\n      })\n    );\n  };\n\n  const handleEditCustomer = (customerId: number) => {\n    dispatch(\n      addTab({\n        tabType: 'Customer',\n        tabLabel: 'Edit customer',\n        isRemovableTab: true,\n        entityId: customerId,\n        parentTabId: tabId,\n      })\n    );\n  };\n\n  const getAllCustomer = () => {\n    // Get Customer list by API or mock data\n    setCustomerList(mockCustomerList);\n  };\n\n  useEffect(() => {\n    getAllCustomer()\n  }, []);\n\n  useEffect(() => {\n    if (refreshedTab === tabId) {\n      dispatch(setRefreshedTab(undefined))\n      getAllCustomer()\n    }\n  }, [refreshedTab]);\n\n  return (\n    <div>\n      <Box display=\"flex\" justifyContent=\"flex-start\" mb={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleNewCustomer}\n        >\n          New Customer\n        </Button>\n      </Box>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>ID</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Actions</TableCell> {/* Column for buttons */}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {customerList.map((customer) => (\n              <TableRow key={customer.id}>\n                <TableCell>{customer.name}</TableCell>\n                <TableCell>{customer.id}</TableCell>\n                <TableCell>{customer.email}</TableCell>\n                <TableCell>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={() => handleEditCustomer(customer.id)}\n                  >\n                    Edit\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default Customers;","import { CustomerData } from \"../interfaces/ICustomer\";\n\nexport const mockCustomerList: CustomerData[] = [\n  { id: 1, name: 'John Doe', email: 'john@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane@example.com' },\n  { id: 3, name: 'Robert Johnson', email: 'robert@example.com' },\n  { id: 4, name: 'Emily Davis', email: 'emily@example.com' },\n  { id: 5, name: 'Michael Brown', email: 'michael@example.com' },\n  { id: 6, name: 'Sarah Wilson', email: 'sarah@example.com' },\n  { id: 7, name: 'David Martinez', email: 'david@example.com' },\n  { id: 8, name: 'Sophia Taylor', email: 'sophia@example.com' },\n  { id: 9, name: 'James Anderson', email: 'james@example.com' },\n  { id: 10, name: 'Olivia Thomas', email: 'olivia@example.com' },\n];"],"names":["_ref","tabId","customerList","setCustomerList","useState","dispatch","useDispatch","refreshedTab","useSelector","state","tabs","getAllCustomer","mockCustomerList","useEffect","setRefreshedTab","undefined","_jsxs","children","_jsx","Box","display","justifyContent","mb","Button","variant","color","onClick","handleNewCustomer","addTab","tabType","tabLabel","isRemovableTab","entityId","parentTabId","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","customer","name","id","email","handleEditCustomer","customerId"],"sourceRoot":""}